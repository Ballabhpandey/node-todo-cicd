vocabulary V {
    type ConfigObject := {1..$n$}
    Pigeon: (ConfigObject) → 𝔹
    Hole: (ConfigObject) → 𝔹
    UNUSED: (ConfigObject) → 𝔹
    holeOf: (Pigeon) → Hole
    var p ∈ Pigeon
    var h ∈ Hole
    maxPigeon: () → ℤ
    maxHole: () → ℤ
    maxUNUSED: () → ℤ
    type TypeConfigObject := {Pigeon__, Hole__, UNUSED__}
    typeConfigObject : ConfigObject -> TypeConfigObject
}
theory T:V {
    #{p : true} = 15.
    ∀ h: #{p : holeOf(p) = h} = 1.

    { !x in ConfigObject: typeConfigObject(x)=Pigeon__ <- Pigeon(x).
      !x in ConfigObject: typeConfigObject(x)=Hole__ <- Hole(x).
      !x in ConfigObject: typeConfigObject(x)=UNUSED__ <- UNUSED(x).
    }
    {
      !x in ConfigObject: typeConfigObject(x)=Pigeon__ <- 1 =< x < maxPigeon().
      !x in ConfigObject: typeConfigObject(x)=Hole__ <- maxPigeon() =< x < maxHole().
      !x in ConfigObject: typeConfigObject(x)=UNUSED__ <- maxHole() =< x < maxUNUSED().
    }


}

procedure main() {
    pretty_print(model_expand(T, max=1, timeout_seconds=120))
}
