vocabulary V { 
    type ConfigObject 
    Monkey: (ConfigObject) → 𝔹
    Banana: (ConfigObject) → 𝔹
    Tree: (ConfigObject) → 𝔹
    UNUSED: (ConfigObject) → 𝔹
    ownerOfB: (Banana) → Monkey
    treeOfM: (Monkey) → Tree
    partnerOfM: (Monkey) → Monkey
    var m ∈ Monkey
    var b ∈ Banana
    var t ∈ Tree
    maxMonkey: () → ℤ
    maxBanana: () → ℤ
    maxTree: () → ℤ
    maxUNUSED: () → ℤ
    mulConfigObject: (ConfigObject) → ℤ
    type TypeConfigObject := {Monkey__, Banana__, Tree__, UNUSED__}
    typeConfigObject : ConfigObject -> TypeConfigObject
}
theory T:V { 
    [∀ m: 2 ≤ #{b : ownerOfB(b) = m}]
      ∀ m ∈ Monkey: 2 ⨯ mulConfigObject(m) ≤ sum(lambda b ∈ Banana : if ownerOfB(b) = m then mulConfigObject(b) else 0).
    [∀ t: #{m : treeOfM(m) = t} = 3]
      ∀ t ∈ Tree: sum(lambda m ∈ Monkey : if treeOfM(m) = t then mulConfigObject(m) else 0) = 3 ⨯ mulConfigObject(t).
    [∀ m: partnerOfM(m) ≠ m ∧ partnerOfM(partnerOfM(m)) = m]
      ∀ m ∈ Monkey: ¬(partnerOfM(m) = m) ∧ partnerOfM(partnerOfM(m)) = m.
    [#{t : true} = 4]
      sum(lambda t ∈ Tree : mulConfigObject(t)) = 4.
    ∀ mulConfigObject0_ ∈ ConfigObject: 0 ≤ mulConfigObject(mulConfigObject0_).
    ∀ b ∈ Banana: ∃ n__5sldkqsdf ∈ ℤ: mulConfigObject(b) = n__5sldkqsdf ⨯ mulConfigObject(ownerOfB(b)).
    ∀ m ∈ Monkey: ∃ n__5sldkqsdf ∈ ℤ: mulConfigObject(m) = n__5sldkqsdf ⨯ mulConfigObject(treeOfM(m)).
    ∀ partnerOfM0_ ∈ Monkey: ∃ n__5sldkqsdf ∈ ℤ: mulConfigObject(partnerOfM0_) = n__5sldkqsdf ⨯ mulConfigObject(partnerOfM(partnerOfM0_)).
    
    { !x in ConfigObject: typeConfigObject(x)=Monkey__ <- Monkey(x)& 0 < mulConfigObject(x).
      !x in ConfigObject: typeConfigObject(x)=Banana__ <- Banana(x)& 0 < mulConfigObject(x).
      !x in ConfigObject: typeConfigObject(x)=Tree__ <- Tree(x)& 0 < mulConfigObject(x).
      !x in ConfigObject: typeConfigObject(x)=UNUSED__ <- UNUSED(x)& 0 < mulConfigObject(x).
    }
    {
      !x in ConfigObject: typeConfigObject(x)=Monkey__ <- 1 =< x < maxMonkey().
      !x in ConfigObject: typeConfigObject(x)=Banana__ <- maxMonkey() =< x < maxBanana().
      !x in ConfigObject: typeConfigObject(x)=Tree__ <- maxBanana() =< x < maxTree().
      !x in ConfigObject: typeConfigObject(x)=UNUSED__ <- maxTree() =< x < maxUNUSED().
    }

    
}

procedure main() {
    logging.getLogger().setLevel(logging.INFO)
    interp, sol = Theory(T).generate(factor=1.5, timeout_seconds=0, unsat_seconds=5)
    pretty_print(sol)
    print(duration("Expansion"))
    print("-------------------")
    print(Theory(T).expand_lifting(sol))
    print("-------------------")
}
        