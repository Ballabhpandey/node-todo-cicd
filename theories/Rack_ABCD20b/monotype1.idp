vocabulary V { 
    type ConfigObject 
    Rack: (ConfigObject) → 𝔹
    Frame: (ConfigObject) → 𝔹
    Module: (ConfigObject) → 𝔹
    Element: (ConfigObject) → 𝔹
    type RackType := {RackSingle, RackDouble}
    type ModuleType := {ModuleI, ModuleII, ModuleIII, ModuleIV, ModuleV}
    type ElementType := {ElementA, ElementB, ElementC, ElementD}
    module14: (Module) → 𝔹
    typeOfR: (Rack) → RackType
    typeOfM: (Module) → ModuleType
    typeOfE: (Element) → ElementType
    rackOfF: (Frame) → Rack
    frameOfM: (Module) → Frame
    elementOfM: (module14) → Element
    frameOfE: (Element) → Frame
    maxRack: () → ℤ
    maxFrame: () → ℤ
    maxModule: () → ℤ
    maxElement: () → ℤ
    type TypeConfigObject := {Rack__, Frame__, Module__, Element__}
    typeConfigObject : ConfigObject -> TypeConfigObject
}
theory T:V { 
    ∀ r ∈ Rack: typeOfR(r) = RackSingle ⇒ #{f ∈ Frame : rackOfF(f) = r} = 4.
    ∀ r ∈ Rack: typeOfR(r) = RackDouble ⇒ #{f ∈ Frame : rackOfF(f) = r} = 8.
    ∀ f ∈ Frame: #{m ∈ Module : frameOfM(m) = f} ≤ 5.
    ∀ f ∈ Frame: (∃ m2 ∈ Module: frameOfM(m2) = f ∧ typeOfM(m2) = ModuleII) ⇔ #{m5 ∈ Module : frameOfM(m5) = f ∧ typeOfM(m5) = ModuleV} = 1.
    ∀ f ∈ Frame: (∃ m2 ∈ Module: frameOfM(m2) = f ∧ typeOfM(m2) = ModuleV) ⇒ (∃ m2 ∈ Module: frameOfM(m2) = f ∧ typeOfM(m2) = ModuleII).
    ∀ e ∈ Element: typeOfE(e) = ElementA ⇒ #{m ∈ Module : elementOfM(m) = e ∧ typeOfM(m) = ModuleI} = 1.
    ∀ e ∈ Element: typeOfE(e) = ElementB ⇒ #{m ∈ Module : elementOfM(m) = e ∧ typeOfM(m) = ModuleII} = 2.
    ∀ e ∈ Element: typeOfE(e) = ElementC ⇒ #{m ∈ Module : elementOfM(m) = e ∧ typeOfM(m) = ModuleIII} = 3.
    ∀ e ∈ Element: typeOfE(e) = ElementD ⇒ #{m ∈ Module : elementOfM(m) = e ∧ typeOfM(m) = ModuleIV} = 4.
    ∀ m ∈ module14: frameOfM(m) = frameOfE(elementOfM(m)).
    #{e ∈ Element : typeOfE(e) = ElementA} = 5.
    #{e ∈ Element : typeOfE(e) = ElementB} = 5.
    #{e ∈ Element : typeOfE(e) = ElementC} = 5.
    #{e ∈ Element : typeOfE(e) = ElementD} = 5.
    { ∀ module140_ ∈ Module: module14(module140_) ← ¬(typeOfM(module140_) = ModuleV).
    }
    { !x in ConfigObject: typeConfigObject(x)=Rack__ <- Rack(x).
      !x in ConfigObject: typeConfigObject(x)=Frame__ <- Frame(x).
      !x in ConfigObject: typeConfigObject(x)=Module__ <- Module(x).
      !x in ConfigObject: typeConfigObject(x)=Element__ <- Element(x).
    }
    {
      !x in ConfigObject: typeConfigObject(x)=Rack__ <- 1 =< x < maxRack().
      !x in ConfigObject: typeConfigObject(x)=Frame__ <- maxRack() =< x < maxFrame().
      !x in ConfigObject: typeConfigObject(x)=Module__ <- maxFrame() =< x < maxModule().
      !x in ConfigObject: typeConfigObject(x)=Element__ <- maxModule() =< x < maxElement().
    }

    
}

procedure main() {
    logging.getLogger().setLevel(logging.INFO)
    interp, sol = Theory(T).generate(timeout_seconds=0, unsat_seconds=5)
    pretty_print(sol)
    print(duration("Expansion"))
    print("-------------------")
    print(Theory(T).expand_lifting(sol))
    print("-------------------")
}
        