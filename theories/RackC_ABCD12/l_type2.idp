vocabulary V { 
    type Rack_T 
    Rack: (Rack_T) → 𝔹
    type FrameC_T 
    FrameC: (FrameC_T) → 𝔹
    type ModuleC_T 
    ModuleC: (ModuleC_T) → 𝔹
    type Element_T 
    Element: (Element_T) → 𝔹
    type Frame := constructed from {frame(rackOfF: Rack, frame_1: FrameC)}
    type Module := constructed from {module(frameOfM: Frame, module_1: ModuleC)}
    type RackType := {RackSingle, RackDouble}
    type ModuleType := {ModuleI, ModuleII, ModuleIII, ModuleIV, ModuleV}
    type ElementType := {ElementA, ElementB, ElementC, ElementD}
    module14: (Module) → 𝔹
    typeOfR: (Rack) → RackType
    typeOfM: (Module) → ModuleType
    typeOfE: (Element) → ElementType
    elementOfM: (module14) → Element
    mulRack_T: (Rack_T) → ℤ
    mulFrameC_T: (FrameC_T) → ℤ
    mulModuleC_T: (ModuleC_T) → ℤ
    mulElement_T: (Element_T) → ℤ
}
theory T:V { 
    [∀ r ∈ Rack: typeOfR(r) = RackSingle ⇒ #{f ∈ Frame : rackOfF(f) = r} = 4]
      ∀ r ∈ Rack: typeOfR(r) = RackSingle ⇒ sum(lambda f ∈ Frame : if rackOfF(f) = r then 1 else 0) = 4 ⨯ mulRack_T(r).
    [∀ r ∈ Rack: typeOfR(r) = RackDouble ⇒ #{f ∈ Frame : rackOfF(f) = r} = 8]
      ∀ r ∈ Rack: typeOfR(r) = RackDouble ⇒ sum(lambda f ∈ Frame : if rackOfF(f) = r then 1 else 0) = 8 ⨯ mulRack_T(r).
    [∀ f ∈ Frame: #{m ∈ Module : frameOfM(m) = f} ≤ 5]
      ∀ f ∈ Frame: sum(lambda m ∈ Module : if frameOfM(m) = f then 1 else 0) ≤ 5.
    [∀ f ∈ Frame: (∃ m2 ∈ Module: frameOfM(m2) = f ∧ typeOfM(m2) = ModuleII) ⇔ #{m5 ∈ Module : frameOfM(m5) = f ∧ typeOfM(m5) = ModuleV} = 1]
      ∀ f ∈ Frame: (∃ m2 ∈ Module: frameOfM(m2) = f ∧ typeOfM(m2) = ModuleII) ⇔ sum(lambda m5 ∈ Module : if frameOfM(m5) = f ∧ typeOfM(m5) = ModuleV then 1 else 0) = 1.
    [∀ f ∈ Frame: (∃ m2 ∈ Module: frameOfM(m2) = f ∧ typeOfM(m2) = ModuleV) ⇒ (∃ m2 ∈ Module: frameOfM(m2) = f ∧ typeOfM(m2) = ModuleII)]
      ∀ f ∈ Frame: (∃ m2 ∈ Module: frameOfM(m2) = f ∧ typeOfM(m2) = ModuleV) ⇒ (∃ m2 ∈ Module: frameOfM(m2) = f ∧ typeOfM(m2) = ModuleII).
    [∀ e ∈ Element: typeOfE(e) = ElementA ⇒ #{m ∈ Module : elementOfM(m) = e ∧ typeOfM(m) = ModuleI} = 1]
      ∀ e ∈ Element: typeOfE(e) = ElementA ⇒ sum(lambda m ∈ Module : if elementOfM(m) = e ∧ typeOfM(m) = ModuleI then 1 else 0) = 1 ⨯ mulElement_T(e).
    [∀ e ∈ Element: typeOfE(e) = ElementB ⇒ #{m ∈ Module : elementOfM(m) = e ∧ typeOfM(m) = ModuleII} = 2]
      ∀ e ∈ Element: typeOfE(e) = ElementB ⇒ sum(lambda m ∈ Module : if elementOfM(m) = e ∧ typeOfM(m) = ModuleII then 1 else 0) = 2 ⨯ mulElement_T(e).
    [∀ e ∈ Element: typeOfE(e) = ElementC ⇒ #{m ∈ Module : elementOfM(m) = e ∧ typeOfM(m) = ModuleIII} = 3]
      ∀ e ∈ Element: typeOfE(e) = ElementC ⇒ sum(lambda m ∈ Module : if elementOfM(m) = e ∧ typeOfM(m) = ModuleIII then 1 else 0) = 3 ⨯ mulElement_T(e).
    [∀ e ∈ Element: typeOfE(e) = ElementD ⇒ #{m ∈ Module : elementOfM(m) = e ∧ typeOfM(m) = ModuleIV} = 4]
      ∀ e ∈ Element: typeOfE(e) = ElementD ⇒ sum(lambda m ∈ Module : if elementOfM(m) = e ∧ typeOfM(m) = ModuleIV then 1 else 0) = 4 ⨯ mulElement_T(e).
    [#{e ∈ Element : typeOfE(e) = ElementA} = 3]
      sum(lambda e ∈ Element : if typeOfE(e) = ElementA then mulElement_T(e) else 0) = 3.
    [#{e ∈ Element : typeOfE(e) = ElementB} = 3]
      sum(lambda e ∈ Element : if typeOfE(e) = ElementB then mulElement_T(e) else 0) = 3.
    [#{e ∈ Element : typeOfE(e) = ElementC} = 3]
      sum(lambda e ∈ Element : if typeOfE(e) = ElementC then mulElement_T(e) else 0) = 3.
    [#{e ∈ Element : typeOfE(e) = ElementD} = 3]
      sum(lambda e ∈ Element : if typeOfE(e) = ElementD then mulElement_T(e) else 0) = 3.
    ∀ mulRack_T0_ ∈ Rack_T: 0 ≤ mulRack_T(mulRack_T0_).
    ∀ mulFrameC_T0_ ∈ FrameC_T: 0 ≤ mulFrameC_T(mulFrameC_T0_).
    ∀ mulModuleC_T0_ ∈ ModuleC_T: 0 ≤ mulModuleC_T(mulModuleC_T0_).
    ∀ mulElement_T0_ ∈ Element_T: 0 ≤ mulElement_T(mulElement_T0_).
    ∀ f ∈ Frame: mulRack_T(rackOfF(f)) = 1.
    ∀ m ∈ Module: mulElement_T(elementOfM(m)) = 1.
    { ∀ module140_ ∈ Module: module14(module140_) ← ¬(typeOfM(module140_) = ModuleV).
    }
    ! x in Rack_T: Rack(x) <=> 0 < mulRack_T(x).
    ! x in FrameC_T: FrameC(x) <=> 0 < mulFrameC_T(x).
    ! x in ModuleC_T: ModuleC(x) <=> 0 < mulModuleC_T(x).
    ! x in Element_T: Element(x) <=> 0 < mulElement_T(x).
    
}

procedure main() {
    logging.getLogger().setLevel(logging.INFO)
    interp, sol = Theory(T).generate(factor=1.5, timeout_seconds=0)
    pretty_print(sol)
    print(duration("Expansion"))
    print("-------------------")
    print(Theory(T).expand_lifting(sol))
    print("-------------------")
}
        