vocabulary V { 
    type ConfigObject 
    Pigeon: (ConfigObject) → 𝔹
    Hole: (ConfigObject) → 𝔹
    holeOf: (Pigeon) → Hole
    var p ∈ Pigeon
    var h ∈ Hole
    maxPigeon: () → ℤ
    maxHole: () → ℤ
    mulConfigObject: (ConfigObject) → ℤ
    type TypeConfigObject := {Pigeon__, Hole__}
    typeConfigObject : ConfigObject -> TypeConfigObject
}
theory T:V { 
    [#{p : true} = 1]
      sum(lambda p ∈ Pigeon : mulConfigObject(p)) = 1.
    [∀ h: #{p : holeOf(p) = h} = 1]
      ∀ h ∈ Hole: sum(lambda p ∈ Pigeon : if holeOf(p) = h then mulConfigObject(p) else 0) = 1 ⨯ mulConfigObject(h).
    ∀ mulConfigObject0_ ∈ ConfigObject: 0 ≤ mulConfigObject(mulConfigObject0_).
    ∀ p ∈ Pigeon: ∃ n__5sldkqsdf ∈ ℤ: mulConfigObject(p) = n__5sldkqsdf ⨯ mulConfigObject(holeOf(p)).
    
    { !x in ConfigObject: typeConfigObject(x)=Pigeon__ <- Pigeon(x)& 0 < mulConfigObject(x).
      !x in ConfigObject: typeConfigObject(x)=Hole__ <- Hole(x)& 0 < mulConfigObject(x).
    }
    {
      !x in ConfigObject: typeConfigObject(x)=Pigeon__ <- 1 =< x < maxPigeon().
      !x in ConfigObject: typeConfigObject(x)=Hole__ <- maxPigeon() =< x < maxHole().
    }

    
}

procedure main() {
    logging.getLogger().setLevel(logging.INFO)
    interp, sol = Theory(T).generate(timeout_seconds=0)
    pretty_print(sol)
    print(duration("Expansion"))
    print("-------------------")
    print(Theory(T).expand_lifting(sol))
    print("-------------------")
}
        