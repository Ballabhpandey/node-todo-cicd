vocabulary V { 
    type ConfigObject 
    El: (ConfigObject) → 𝔹
    UNUSED: (ConfigObject) → 𝔹
    C: (El) → 𝔹
    C1: (El) → 𝔹
    alloc0: (El) → 𝔹
    alloc1: (El) → 𝔹
    alloc2: (El) → 𝔹
    c: () → El
    var e ∈ El
    maxEl: () → ℤ
    maxUNUSED: () → ℤ
    mulConfigObject: (ConfigObject) → ℤ
    type TypeConfigObject := {El__, UNUSED__}
    typeConfigObject : ConfigObject -> TypeConfigObject
}
theory T:V { 
    [¬((C(c()) ∧ (∀ e: C1(e) ⇔ C(e) ∧ e ≠ c()) ∧ #{e : alloc1(e) ∧ ¬(alloc0(e))} ≤ 1 ∧ #{e : alloc2(e) ∧ ¬(alloc1(e))} ≤ #{e : C1(e)} ⇒ #{e : alloc2(e) ∧ ¬(alloc0(e))} ≤ #{e : C(e)}))]
      ¬((C(c()) ∧ (∀ e ∈ El: C1(e) ⇔ C(e) ∧ ¬(e = c())) ∧ sum(lambda e ∈ El : if alloc1(e) ∧ ¬(alloc0(e)) then mulConfigObject(e) else 0) ≤ 1 ∧ sum(lambda e ∈ El : if alloc2(e) ∧ ¬(alloc1(e)) then mulConfigObject(e) else 0) ≤ sum(lambda e ∈ El : if C1(e) then mulConfigObject(e) else 0) ⇒ sum(lambda e ∈ El : if alloc2(e) ∧ ¬(alloc0(e)) then mulConfigObject(e) else 0) ≤ sum(lambda e ∈ El : if C(e) then mulConfigObject(e) else 0))).
    ∀ mulConfigObject0_ ∈ ConfigObject: 0 ≤ mulConfigObject(mulConfigObject0_).
    mulConfigObject(c()) = 1.
    
    { !x in ConfigObject: typeConfigObject(x)=El__ <- El(x)& 0 < mulConfigObject(x).
      !x in ConfigObject: typeConfigObject(x)=UNUSED__ <- UNUSED(x)& 0 < mulConfigObject(x).
    }
    {
      !x in ConfigObject: typeConfigObject(x)=El__ <- 1 =< x < maxEl().
      !x in ConfigObject: typeConfigObject(x)=UNUSED__ <- maxEl() =< x < maxUNUSED().
    }

    
}

procedure main() {
    logging.getLogger().setLevel(logging.INFO)
    interp, sol = Theory(T).generate(factor=1.5, timeout_seconds=0)
    pretty_print(sol)
    print(duration("Expansion"))
    print("-------------------")
    print(Theory(T).expand_lifting(sol))
    print("-------------------")
}
        