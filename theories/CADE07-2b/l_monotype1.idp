vocabulary V { 
    type ConfigObject 
    El: (ConfigObject) → 𝔹
    List_content: (El) → 𝔹
    list_size: () → ℤ
    c: () → El
    var e ∈ El
    maxEl: () → ℤ
    mulConfigObject: (ConfigObject) → ℤ
    type TypeConfigObject := {El__}
    typeConfigObject : ConfigObject -> TypeConfigObject
}
theory T:V { 
    [¬((list_size() = #{e : List_content(e)} ⇒ (list_size() + 1 = #{e : List_content(e) ∨ e = c()})))]
      ¬((list_size() = sum(lambda e ∈ El : if List_content(e) then mulConfigObject(e) else 0) ⇒ (list_size() + 1 = sum(lambda e ∈ El : if List_content(e) ∨ e = c() then mulConfigObject(e) else 0)))).
    ∀ mulConfigObject0_ ∈ ConfigObject: 0 ≤ mulConfigObject(mulConfigObject0_).
    mulConfigObject(c()) = 1.
    
    { !x in ConfigObject: typeConfigObject(x)=El__ <- El(x)& 0 < mulConfigObject(x).
    }
    {
      !x in ConfigObject: typeConfigObject(x)=El__ <- 1 =< x < maxEl().
    }

    
}

procedure main() {
    logging.getLogger().setLevel(logging.INFO)
    interp, sol = Theory(T).generate(timeout_seconds=0)
    pretty_print(sol)
    print(duration("Expansion"))
    print("-------------------")
    print(Theory(T).expand_lifting(sol))
    print("-------------------")
}
        